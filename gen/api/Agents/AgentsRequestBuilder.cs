// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using SpaceTradersApi.Client.Agents.Item;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace SpaceTradersApi.Client.Agents
{
    /// <summary>
    /// Builds and executes requests for operations under \agents
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    public partial class AgentsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the SpaceTradersApi.Client.agents.item collection</summary>
        /// <param name="position">The agent symbol</param>
        /// <returns>A <see cref="global::SpaceTradersApi.Client.Agents.Item.WithAgentSymbolItemRequestBuilder"/></returns>
        public global::SpaceTradersApi.Client.Agents.Item.WithAgentSymbolItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("agentSymbol", position);
                return new global::SpaceTradersApi.Client.Agents.Item.WithAgentSymbolItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::SpaceTradersApi.Client.Agents.AgentsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AgentsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/agents{?limit*,page*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::SpaceTradersApi.Client.Agents.AgentsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AgentsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/agents{?limit*,page*}", rawUrl)
        {
        }
        /// <summary>
        /// Fetch agents details.
        /// </summary>
        /// <returns>A <see cref="global::SpaceTradersApi.Client.Agents.AgentsGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::SpaceTradersApi.Client.Agents.AgentsGetResponse?> GetAsync(Action<RequestConfiguration<global::SpaceTradersApi.Client.Agents.AgentsRequestBuilder.AgentsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::SpaceTradersApi.Client.Agents.AgentsGetResponse> GetAsync(Action<RequestConfiguration<global::SpaceTradersApi.Client.Agents.AgentsRequestBuilder.AgentsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::SpaceTradersApi.Client.Agents.AgentsGetResponse>(requestInfo, global::SpaceTradersApi.Client.Agents.AgentsGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Fetch agents details.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::SpaceTradersApi.Client.Agents.AgentsRequestBuilder.AgentsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::SpaceTradersApi.Client.Agents.AgentsRequestBuilder.AgentsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::SpaceTradersApi.Client.Agents.AgentsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::SpaceTradersApi.Client.Agents.AgentsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::SpaceTradersApi.Client.Agents.AgentsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Fetch agents details.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
        public partial class AgentsRequestBuilderGetQueryParameters 
        {
            /// <summary>How many entries to return per page</summary>
            [QueryParameter("limit")]
            public int? Limit { get; set; }
            /// <summary>What entry offset to request</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
        }
    }
}
