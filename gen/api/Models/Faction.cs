// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace SpaceTradersApi.Client.Models
{
    /// <summary>
    /// Faction details.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    public partial class Faction : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Description of the faction.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The waypoint in which the faction&apos;s HQ is located in.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Headquarters { get; set; }
#nullable restore
#else
        public string Headquarters { get; set; }
#endif
        /// <summary>Whether or not the faction is currently recruiting new agents.</summary>
        public bool? IsRecruiting { get; set; }
        /// <summary>Name of the faction.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The symbol of the faction.</summary>
        public global::SpaceTradersApi.Client.Models.FactionSymbol? Symbol { get; set; }
        /// <summary>List of traits that define this faction.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::SpaceTradersApi.Client.Models.FactionTrait>? Traits { get; set; }
#nullable restore
#else
        public List<global::SpaceTradersApi.Client.Models.FactionTrait> Traits { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::SpaceTradersApi.Client.Models.Faction"/> and sets the default values.
        /// </summary>
        public Faction()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::SpaceTradersApi.Client.Models.Faction"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::SpaceTradersApi.Client.Models.Faction CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::SpaceTradersApi.Client.Models.Faction();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "description", n => { Description = n.GetStringValue(); } },
                { "headquarters", n => { Headquarters = n.GetStringValue(); } },
                { "isRecruiting", n => { IsRecruiting = n.GetBoolValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "symbol", n => { Symbol = n.GetEnumValue<global::SpaceTradersApi.Client.Models.FactionSymbol>(); } },
                { "traits", n => { Traits = n.GetCollectionOfObjectValues<global::SpaceTradersApi.Client.Models.FactionTrait>(global::SpaceTradersApi.Client.Models.FactionTrait.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("headquarters", Headquarters);
            writer.WriteBoolValue("isRecruiting", IsRecruiting);
            writer.WriteStringValue("name", Name);
            writer.WriteEnumValue<global::SpaceTradersApi.Client.Models.FactionSymbol>("symbol", Symbol);
            writer.WriteCollectionOfObjectValues<global::SpaceTradersApi.Client.Models.FactionTrait>("traits", Traits);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
