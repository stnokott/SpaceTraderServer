// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace SpaceTradersApi.Client.Models
{
    /// <summary>
    /// The ship&apos;s crew service and maintain the ship&apos;s systems and equipment.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    public partial class ShipCrew : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The maximum number of crew members the ship can support.</summary>
        public int? Capacity { get; set; }
        /// <summary>The current number of crew members on the ship.</summary>
        public int? Current { get; set; }
        /// <summary>A rough measure of the crew&apos;s morale. A higher morale means the crew is happier and more productive. A lower morale means the ship is more prone to accidents.</summary>
        public int? Morale { get; set; }
        /// <summary>The minimum number of crew members required to maintain the ship.</summary>
        public int? Required { get; set; }
        /// <summary>The rotation of crew shifts. A stricter shift improves the ship&apos;s performance. A more relaxed shift improves the crew&apos;s morale.</summary>
        public global::SpaceTradersApi.Client.Models.ShipCrew_rotation? Rotation { get; set; }
        /// <summary>The amount of credits per crew member paid per hour. Wages are paid when a ship docks at a civilized waypoint.</summary>
        public int? Wages { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::SpaceTradersApi.Client.Models.ShipCrew"/> and sets the default values.
        /// </summary>
        public ShipCrew()
        {
            AdditionalData = new Dictionary<string, object>();
            Rotation = global::SpaceTradersApi.Client.Models.ShipCrew_rotation.STRICT;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::SpaceTradersApi.Client.Models.ShipCrew"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::SpaceTradersApi.Client.Models.ShipCrew CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::SpaceTradersApi.Client.Models.ShipCrew();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "capacity", n => { Capacity = n.GetIntValue(); } },
                { "current", n => { Current = n.GetIntValue(); } },
                { "morale", n => { Morale = n.GetIntValue(); } },
                { "required", n => { Required = n.GetIntValue(); } },
                { "rotation", n => { Rotation = n.GetEnumValue<global::SpaceTradersApi.Client.Models.ShipCrew_rotation>(); } },
                { "wages", n => { Wages = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("capacity", Capacity);
            writer.WriteIntValue("current", Current);
            writer.WriteIntValue("morale", Morale);
            writer.WriteIntValue("required", Required);
            writer.WriteEnumValue<global::SpaceTradersApi.Client.Models.ShipCrew_rotation>("rotation", Rotation);
            writer.WriteIntValue("wages", Wages);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
