// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace SpaceTradersApi.Client.Models
{
    /// <summary>
    /// A resource survey of a waypoint, detailing a specific extraction location and the types of resources that can be found there.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    public partial class Survey : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>A list of deposits that can be found at this location. A ship will extract one of these deposits when using this survey in an extraction request. If multiple deposits of the same type are present, the chance of extracting that deposit is increased.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::SpaceTradersApi.Client.Models.SurveyDeposit>? Deposits { get; set; }
#nullable restore
#else
        public List<global::SpaceTradersApi.Client.Models.SurveyDeposit> Deposits { get; set; }
#endif
        /// <summary>The date and time when the survey expires. After this date and time, the survey will no longer be available for extraction.</summary>
        public DateTimeOffset? Expiration { get; set; }
        /// <summary>A unique signature for the location of this survey. This signature is verified when attempting an extraction using this survey.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Signature { get; set; }
#nullable restore
#else
        public string Signature { get; set; }
#endif
        /// <summary>The size of the deposit. This value indicates how much can be extracted from the survey before it is exhausted.</summary>
        public global::SpaceTradersApi.Client.Models.Survey_size? Size { get; set; }
        /// <summary>The symbol of the waypoint that this survey is for.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Symbol { get; set; }
#nullable restore
#else
        public string Symbol { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::SpaceTradersApi.Client.Models.Survey"/> and sets the default values.
        /// </summary>
        public Survey()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::SpaceTradersApi.Client.Models.Survey"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::SpaceTradersApi.Client.Models.Survey CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::SpaceTradersApi.Client.Models.Survey();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "deposits", n => { Deposits = n.GetCollectionOfObjectValues<global::SpaceTradersApi.Client.Models.SurveyDeposit>(global::SpaceTradersApi.Client.Models.SurveyDeposit.CreateFromDiscriminatorValue)?.AsList(); } },
                { "expiration", n => { Expiration = n.GetDateTimeOffsetValue(); } },
                { "signature", n => { Signature = n.GetStringValue(); } },
                { "size", n => { Size = n.GetEnumValue<global::SpaceTradersApi.Client.Models.Survey_size>(); } },
                { "symbol", n => { Symbol = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::SpaceTradersApi.Client.Models.SurveyDeposit>("deposits", Deposits);
            writer.WriteDateTimeOffsetValue("expiration", Expiration);
            writer.WriteStringValue("signature", Signature);
            writer.WriteEnumValue<global::SpaceTradersApi.Client.Models.Survey_size>("size", Size);
            writer.WriteStringValue("symbol", Symbol);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
