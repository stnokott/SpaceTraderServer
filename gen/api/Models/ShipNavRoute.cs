// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace SpaceTradersApi.Client.Models
{
    /// <summary>
    /// The routing information for the ship&apos;s most recent transit or current location.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    public partial class ShipNavRoute : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The date time of the ship&apos;s arrival. If the ship is in-transit, this is the expected time of arrival.</summary>
        public DateTimeOffset? Arrival { get; set; }
        /// <summary>The date time of the ship&apos;s departure.</summary>
        public DateTimeOffset? DepartureTime { get; set; }
        /// <summary>The destination or departure of a ships nav route.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::SpaceTradersApi.Client.Models.ShipNavRouteWaypoint? Destination { get; set; }
#nullable restore
#else
        public global::SpaceTradersApi.Client.Models.ShipNavRouteWaypoint Destination { get; set; }
#endif
        /// <summary>The destination or departure of a ships nav route.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::SpaceTradersApi.Client.Models.ShipNavRouteWaypoint? Origin { get; set; }
#nullable restore
#else
        public global::SpaceTradersApi.Client.Models.ShipNavRouteWaypoint Origin { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::SpaceTradersApi.Client.Models.ShipNavRoute"/> and sets the default values.
        /// </summary>
        public ShipNavRoute()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::SpaceTradersApi.Client.Models.ShipNavRoute"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::SpaceTradersApi.Client.Models.ShipNavRoute CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::SpaceTradersApi.Client.Models.ShipNavRoute();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "arrival", n => { Arrival = n.GetDateTimeOffsetValue(); } },
                { "departureTime", n => { DepartureTime = n.GetDateTimeOffsetValue(); } },
                { "destination", n => { Destination = n.GetObjectValue<global::SpaceTradersApi.Client.Models.ShipNavRouteWaypoint>(global::SpaceTradersApi.Client.Models.ShipNavRouteWaypoint.CreateFromDiscriminatorValue); } },
                { "origin", n => { Origin = n.GetObjectValue<global::SpaceTradersApi.Client.Models.ShipNavRouteWaypoint>(global::SpaceTradersApi.Client.Models.ShipNavRouteWaypoint.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDateTimeOffsetValue("arrival", Arrival);
            writer.WriteDateTimeOffsetValue("departureTime", DepartureTime);
            writer.WriteObjectValue<global::SpaceTradersApi.Client.Models.ShipNavRouteWaypoint>("destination", Destination);
            writer.WriteObjectValue<global::SpaceTradersApi.Client.Models.ShipNavRouteWaypoint>("origin", Origin);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
