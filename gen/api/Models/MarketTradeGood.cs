// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace SpaceTradersApi.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    #pragma warning disable CS1591
    public partial class MarketTradeGood : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The activity level of a trade good. If the good is an import, this represents how strong consumption is. If the good is an export, this represents how strong the production is for the good. When activity is strong, consumption or production is near maximum capacity. When activity is weak, consumption or production is near minimum capacity.</summary>
        public global::SpaceTradersApi.Client.Models.ActivityLevel? Activity { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The price at which this good can be purchased from the market.</summary>
        public int? PurchasePrice { get; set; }
        /// <summary>The price at which this good can be sold to the market.</summary>
        public int? SellPrice { get; set; }
        /// <summary>The supply level of a trade good.</summary>
        public global::SpaceTradersApi.Client.Models.SupplyLevel? Supply { get; set; }
        /// <summary>The good&apos;s symbol.</summary>
        public global::SpaceTradersApi.Client.Models.TradeSymbol? Symbol { get; set; }
        /// <summary>This is the maximum number of units that can be purchased or sold at this market in a single trade for this good. Trade volume also gives an indication of price volatility. A market with a low trade volume will have large price swings, while high trade volume will be more resilient to price changes.</summary>
        public int? TradeVolume { get; set; }
        /// <summary>The type of trade good (export, import, or exchange).</summary>
        public global::SpaceTradersApi.Client.Models.MarketTradeGood_type? Type { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::SpaceTradersApi.Client.Models.MarketTradeGood"/> and sets the default values.
        /// </summary>
        public MarketTradeGood()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::SpaceTradersApi.Client.Models.MarketTradeGood"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::SpaceTradersApi.Client.Models.MarketTradeGood CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::SpaceTradersApi.Client.Models.MarketTradeGood();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "activity", n => { Activity = n.GetEnumValue<global::SpaceTradersApi.Client.Models.ActivityLevel>(); } },
                { "purchasePrice", n => { PurchasePrice = n.GetIntValue(); } },
                { "sellPrice", n => { SellPrice = n.GetIntValue(); } },
                { "supply", n => { Supply = n.GetEnumValue<global::SpaceTradersApi.Client.Models.SupplyLevel>(); } },
                { "symbol", n => { Symbol = n.GetEnumValue<global::SpaceTradersApi.Client.Models.TradeSymbol>(); } },
                { "tradeVolume", n => { TradeVolume = n.GetIntValue(); } },
                { "type", n => { Type = n.GetEnumValue<global::SpaceTradersApi.Client.Models.MarketTradeGood_type>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::SpaceTradersApi.Client.Models.ActivityLevel>("activity", Activity);
            writer.WriteIntValue("purchasePrice", PurchasePrice);
            writer.WriteIntValue("sellPrice", SellPrice);
            writer.WriteEnumValue<global::SpaceTradersApi.Client.Models.SupplyLevel>("supply", Supply);
            writer.WriteEnumValue<global::SpaceTradersApi.Client.Models.TradeSymbol>("symbol", Symbol);
            writer.WriteIntValue("tradeVolume", TradeVolume);
            writer.WriteEnumValue<global::SpaceTradersApi.Client.Models.MarketTradeGood_type>("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
