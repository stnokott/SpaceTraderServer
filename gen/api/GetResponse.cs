// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace SpaceTradersApi.Client
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    #pragma warning disable CS1591
    public partial class GetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The announcements property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::SpaceTradersApi.Client.GetResponse_announcements>? Announcements { get; set; }
#nullable restore
#else
        public List<global::SpaceTradersApi.Client.GetResponse_announcements> Announcements { get; set; }
#endif
        /// <summary>The description property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The leaderboards property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::SpaceTradersApi.Client.GetResponse_leaderboards? Leaderboards { get; set; }
#nullable restore
#else
        public global::SpaceTradersApi.Client.GetResponse_leaderboards Leaderboards { get; set; }
#endif
        /// <summary>The links property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::SpaceTradersApi.Client.GetResponse_links>? Links { get; set; }
#nullable restore
#else
        public List<global::SpaceTradersApi.Client.GetResponse_links> Links { get; set; }
#endif
        /// <summary>The date when the game server was last reset.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ResetDate { get; set; }
#nullable restore
#else
        public string ResetDate { get; set; }
#endif
        /// <summary>The serverResets property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::SpaceTradersApi.Client.GetResponse_serverResets? ServerResets { get; set; }
#nullable restore
#else
        public global::SpaceTradersApi.Client.GetResponse_serverResets ServerResets { get; set; }
#endif
        /// <summary>The stats property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::SpaceTradersApi.Client.GetResponse_stats? Stats { get; set; }
#nullable restore
#else
        public global::SpaceTradersApi.Client.GetResponse_stats Stats { get; set; }
#endif
        /// <summary>The current status of the game server.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Status { get; set; }
#nullable restore
#else
        public string Status { get; set; }
#endif
        /// <summary>The current version of the API.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Version { get; set; }
#nullable restore
#else
        public string Version { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::SpaceTradersApi.Client.GetResponse"/> and sets the default values.
        /// </summary>
        public GetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::SpaceTradersApi.Client.GetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::SpaceTradersApi.Client.GetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::SpaceTradersApi.Client.GetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "announcements", n => { Announcements = n.GetCollectionOfObjectValues<global::SpaceTradersApi.Client.GetResponse_announcements>(global::SpaceTradersApi.Client.GetResponse_announcements.CreateFromDiscriminatorValue)?.AsList(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "leaderboards", n => { Leaderboards = n.GetObjectValue<global::SpaceTradersApi.Client.GetResponse_leaderboards>(global::SpaceTradersApi.Client.GetResponse_leaderboards.CreateFromDiscriminatorValue); } },
                { "links", n => { Links = n.GetCollectionOfObjectValues<global::SpaceTradersApi.Client.GetResponse_links>(global::SpaceTradersApi.Client.GetResponse_links.CreateFromDiscriminatorValue)?.AsList(); } },
                { "resetDate", n => { ResetDate = n.GetStringValue(); } },
                { "serverResets", n => { ServerResets = n.GetObjectValue<global::SpaceTradersApi.Client.GetResponse_serverResets>(global::SpaceTradersApi.Client.GetResponse_serverResets.CreateFromDiscriminatorValue); } },
                { "stats", n => { Stats = n.GetObjectValue<global::SpaceTradersApi.Client.GetResponse_stats>(global::SpaceTradersApi.Client.GetResponse_stats.CreateFromDiscriminatorValue); } },
                { "status", n => { Status = n.GetStringValue(); } },
                { "version", n => { Version = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::SpaceTradersApi.Client.GetResponse_announcements>("announcements", Announcements);
            writer.WriteStringValue("description", Description);
            writer.WriteObjectValue<global::SpaceTradersApi.Client.GetResponse_leaderboards>("leaderboards", Leaderboards);
            writer.WriteCollectionOfObjectValues<global::SpaceTradersApi.Client.GetResponse_links>("links", Links);
            writer.WriteStringValue("resetDate", ResetDate);
            writer.WriteObjectValue<global::SpaceTradersApi.Client.GetResponse_serverResets>("serverResets", ServerResets);
            writer.WriteObjectValue<global::SpaceTradersApi.Client.GetResponse_stats>("stats", Stats);
            writer.WriteStringValue("status", Status);
            writer.WriteStringValue("version", Version);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
