// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using SpaceTradersApi.Client.My.Ships.Item.Cargo;
using SpaceTradersApi.Client.My.Ships.Item.Chart;
using SpaceTradersApi.Client.My.Ships.Item.Cooldown;
using SpaceTradersApi.Client.My.Ships.Item.Dock;
using SpaceTradersApi.Client.My.Ships.Item.Extract;
using SpaceTradersApi.Client.My.Ships.Item.Jettison;
using SpaceTradersApi.Client.My.Ships.Item.Jump;
using SpaceTradersApi.Client.My.Ships.Item.Mounts;
using SpaceTradersApi.Client.My.Ships.Item.Nav;
using SpaceTradersApi.Client.My.Ships.Item.Navigate;
using SpaceTradersApi.Client.My.Ships.Item.Negotiate;
using SpaceTradersApi.Client.My.Ships.Item.Orbit;
using SpaceTradersApi.Client.My.Ships.Item.Purchase;
using SpaceTradersApi.Client.My.Ships.Item.Refine;
using SpaceTradersApi.Client.My.Ships.Item.Refuel;
using SpaceTradersApi.Client.My.Ships.Item.Repair;
using SpaceTradersApi.Client.My.Ships.Item.Scan;
using SpaceTradersApi.Client.My.Ships.Item.Scrap;
using SpaceTradersApi.Client.My.Ships.Item.Sell;
using SpaceTradersApi.Client.My.Ships.Item.Siphon;
using SpaceTradersApi.Client.My.Ships.Item.Survey;
using SpaceTradersApi.Client.My.Ships.Item.Transfer;
using SpaceTradersApi.Client.My.Ships.Item.Warp;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace SpaceTradersApi.Client.My.Ships.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \my\ships\{shipSymbol}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    public partial class WithShipSymbolItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The cargo property</summary>
        public global::SpaceTradersApi.Client.My.Ships.Item.Cargo.CargoRequestBuilder Cargo
        {
            get => new global::SpaceTradersApi.Client.My.Ships.Item.Cargo.CargoRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The chart property</summary>
        public global::SpaceTradersApi.Client.My.Ships.Item.Chart.ChartRequestBuilder Chart
        {
            get => new global::SpaceTradersApi.Client.My.Ships.Item.Chart.ChartRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The cooldown property</summary>
        public global::SpaceTradersApi.Client.My.Ships.Item.Cooldown.CooldownRequestBuilder Cooldown
        {
            get => new global::SpaceTradersApi.Client.My.Ships.Item.Cooldown.CooldownRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The dock property</summary>
        public global::SpaceTradersApi.Client.My.Ships.Item.Dock.DockRequestBuilder Dock
        {
            get => new global::SpaceTradersApi.Client.My.Ships.Item.Dock.DockRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The extract property</summary>
        public global::SpaceTradersApi.Client.My.Ships.Item.Extract.ExtractRequestBuilder Extract
        {
            get => new global::SpaceTradersApi.Client.My.Ships.Item.Extract.ExtractRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The jettison property</summary>
        public global::SpaceTradersApi.Client.My.Ships.Item.Jettison.JettisonRequestBuilder Jettison
        {
            get => new global::SpaceTradersApi.Client.My.Ships.Item.Jettison.JettisonRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The jump property</summary>
        public global::SpaceTradersApi.Client.My.Ships.Item.Jump.JumpRequestBuilder Jump
        {
            get => new global::SpaceTradersApi.Client.My.Ships.Item.Jump.JumpRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The mounts property</summary>
        public global::SpaceTradersApi.Client.My.Ships.Item.Mounts.MountsRequestBuilder Mounts
        {
            get => new global::SpaceTradersApi.Client.My.Ships.Item.Mounts.MountsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The nav property</summary>
        public global::SpaceTradersApi.Client.My.Ships.Item.Nav.NavRequestBuilder Nav
        {
            get => new global::SpaceTradersApi.Client.My.Ships.Item.Nav.NavRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The navigate property</summary>
        public global::SpaceTradersApi.Client.My.Ships.Item.Navigate.NavigateRequestBuilder Navigate
        {
            get => new global::SpaceTradersApi.Client.My.Ships.Item.Navigate.NavigateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The negotiate property</summary>
        public global::SpaceTradersApi.Client.My.Ships.Item.Negotiate.NegotiateRequestBuilder Negotiate
        {
            get => new global::SpaceTradersApi.Client.My.Ships.Item.Negotiate.NegotiateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The orbit property</summary>
        public global::SpaceTradersApi.Client.My.Ships.Item.Orbit.OrbitRequestBuilder Orbit
        {
            get => new global::SpaceTradersApi.Client.My.Ships.Item.Orbit.OrbitRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The purchase property</summary>
        public global::SpaceTradersApi.Client.My.Ships.Item.Purchase.PurchaseRequestBuilder Purchase
        {
            get => new global::SpaceTradersApi.Client.My.Ships.Item.Purchase.PurchaseRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The refine property</summary>
        public global::SpaceTradersApi.Client.My.Ships.Item.Refine.RefineRequestBuilder Refine
        {
            get => new global::SpaceTradersApi.Client.My.Ships.Item.Refine.RefineRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The refuel property</summary>
        public global::SpaceTradersApi.Client.My.Ships.Item.Refuel.RefuelRequestBuilder Refuel
        {
            get => new global::SpaceTradersApi.Client.My.Ships.Item.Refuel.RefuelRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The repair property</summary>
        public global::SpaceTradersApi.Client.My.Ships.Item.Repair.RepairRequestBuilder Repair
        {
            get => new global::SpaceTradersApi.Client.My.Ships.Item.Repair.RepairRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The scan property</summary>
        public global::SpaceTradersApi.Client.My.Ships.Item.Scan.ScanRequestBuilder Scan
        {
            get => new global::SpaceTradersApi.Client.My.Ships.Item.Scan.ScanRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The scrap property</summary>
        public global::SpaceTradersApi.Client.My.Ships.Item.Scrap.ScrapRequestBuilder Scrap
        {
            get => new global::SpaceTradersApi.Client.My.Ships.Item.Scrap.ScrapRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The sell property</summary>
        public global::SpaceTradersApi.Client.My.Ships.Item.Sell.SellRequestBuilder Sell
        {
            get => new global::SpaceTradersApi.Client.My.Ships.Item.Sell.SellRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The siphon property</summary>
        public global::SpaceTradersApi.Client.My.Ships.Item.Siphon.SiphonRequestBuilder Siphon
        {
            get => new global::SpaceTradersApi.Client.My.Ships.Item.Siphon.SiphonRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The survey property</summary>
        public global::SpaceTradersApi.Client.My.Ships.Item.Survey.SurveyRequestBuilder Survey
        {
            get => new global::SpaceTradersApi.Client.My.Ships.Item.Survey.SurveyRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The transfer property</summary>
        public global::SpaceTradersApi.Client.My.Ships.Item.Transfer.TransferRequestBuilder Transfer
        {
            get => new global::SpaceTradersApi.Client.My.Ships.Item.Transfer.TransferRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The warp property</summary>
        public global::SpaceTradersApi.Client.My.Ships.Item.Warp.WarpRequestBuilder Warp
        {
            get => new global::SpaceTradersApi.Client.My.Ships.Item.Warp.WarpRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::SpaceTradersApi.Client.My.Ships.Item.WithShipSymbolItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithShipSymbolItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/my/ships/{shipSymbol}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::SpaceTradersApi.Client.My.Ships.Item.WithShipSymbolItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithShipSymbolItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/my/ships/{shipSymbol}", rawUrl)
        {
        }
        /// <summary>
        /// Retrieve the details of a ship under your agent&apos;s ownership.
        /// </summary>
        /// <returns>A <see cref="global::SpaceTradersApi.Client.My.Ships.Item.WithShipSymbolGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::SpaceTradersApi.Client.My.Ships.Item.WithShipSymbolGetResponse?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::SpaceTradersApi.Client.My.Ships.Item.WithShipSymbolGetResponse> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::SpaceTradersApi.Client.My.Ships.Item.WithShipSymbolGetResponse>(requestInfo, global::SpaceTradersApi.Client.My.Ships.Item.WithShipSymbolGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieve the details of a ship under your agent&apos;s ownership.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::SpaceTradersApi.Client.My.Ships.Item.WithShipSymbolItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::SpaceTradersApi.Client.My.Ships.Item.WithShipSymbolItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::SpaceTradersApi.Client.My.Ships.Item.WithShipSymbolItemRequestBuilder(rawUrl, RequestAdapter);
        }
    }
}
